# -*- coding: utf-8 -*-
from __future__ import unicode_literals

from django.db import models, migrations
import datetime
from django.conf import settings
import django.db.models.deletion
import cpro.models
import django.core.validators


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Account',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('creation', models.DateTimeField(auto_now_add=True)),
                ('level', models.PositiveIntegerField(null=True, verbose_name='Level')),
                ('nickname', models.CharField(max_length=100, null=True, verbose_name='Nickname')),
                ('game_id', models.PositiveIntegerField(null=True, verbose_name='Game ID')),
                ('accept_friend_requests', models.NullBooleanField(help_text='Accept friend requests', verbose_name=b'')),
                ('device', models.CharField(max_length=150, null=True, verbose_name='Device')),
                ('play_with', models.PositiveIntegerField(null=True, verbose_name='Play with', choices=[(0, 'Thumbs'), (1, 'All fingers'), (2, 'Index fingers'), (3, 'One hand'), (4, 'Other')])),
                ('os', models.PositiveIntegerField(default=0, verbose_name='Operating System', choices=[(0, b'iOs'), (1, b'Android')])),
                ('start_date', models.DateField(null=True, verbose_name='Start Date')),
                ('producer_rank', models.PositiveIntegerField(default=0, verbose_name='Producer Rank', choices=[(0, b'E'), (1, b'D'), (2, b'C'), (3, b'B'), (4, b'A'), (5, b'S'), (6, b'SS')])),
                ('_cache_owner_last_update', models.DateTimeField(null=True)),
                ('_cache_owner_username', models.CharField(max_length=32, null=True)),
                ('_cache_owner_email', models.EmailField(max_length=75, null=True)),
                ('_cache_owner_preferences_status', models.CharField(max_length=12, null=True, choices=[(b'THANKS', b'Thanks'), (b'SUPPORTER', 'Idol Supporter'), (b'LOVER', 'Idol Lover'), (b'AMBASSADOR', 'Idol Ambassador'), (b'PRODUCER', 'Idol Producer'), (b'DEVOTEE', 'Ultimate Idol Devotee')])),
                ('_cache_owner_preferences_twitter', models.CharField(max_length=32, null=True)),
                ('_cache_leaderboard_last_update', models.DateTimeField(null=True)),
                ('_cache_leaderboard', models.PositiveIntegerField(null=True)),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Card',
            fields=[
                ('id', models.PositiveIntegerField(unique=True, serialize=False, verbose_name='ID', primary_key=True, db_index=True)),
                ('id_awakened', models.PositiveIntegerField(unique=True, null=True, verbose_name='ID (Awakened)')),
                ('i_rarity', models.PositiveIntegerField(verbose_name='Rarity', choices=[(0, 'Normal'), (1, 'Rare'), (2, 'Super Rare'), (3, 'Super Super Rare')])),
                ('release_date', models.DateField(default=datetime.date(2015, 9, 3), null=True, verbose_name='Release Date')),
                ('is_limited', models.BooleanField(default=False, verbose_name='Limited')),
                ('title', models.CharField(max_length=100, null=True, verbose_name='Title (Japanese)')),
                ('translated_title', models.CharField(max_length=100, null=True, verbose_name='Title (translated in English)', blank=True)),
                ('image', models.ImageField(upload_to=cpro.models.uploadItem(b'c'), verbose_name='Image')),
                ('image_awakened', models.ImageField(upload_to=cpro.models.uploadItem(b'c/a'), verbose_name='Image (Awakened)')),
                ('art', models.ImageField(upload_to=cpro.models.uploadItem(b'c/art'), verbose_name='Art')),
                ('art_awakened', models.ImageField(upload_to=cpro.models.uploadItem(b'c/art/a'), verbose_name='Art (Awakened)')),
                ('transparent', models.ImageField(upload_to=cpro.models.uploadItem(b'c/transparent'), verbose_name='Transparent')),
                ('transparent_awakened', models.ImageField(upload_to=cpro.models.uploadItem(b'c/transparent/a'), verbose_name='Transparent (Awakened)')),
                ('icon', models.ImageField(upload_to=cpro.models.uploadItem(b'c/icon'), verbose_name='Icon')),
                ('icon_awakened', models.ImageField(upload_to=cpro.models.uploadItem(b'c/icon/a'), verbose_name='Icon (Awakened)')),
                ('puchi', models.ImageField(upload_to=cpro.models.uploadItem(b'c/puchi'), verbose_name='Puchi')),
                ('puchi_awakened', models.ImageField(upload_to=cpro.models.uploadItem(b'c/puchi/a'), verbose_name='Puchi (Awakened)')),
                ('hp_min', models.PositiveIntegerField(default=0, verbose_name='Life (Minimum)')),
                ('hp_max', models.PositiveIntegerField(default=0, verbose_name='Life (Maximum)')),
                ('hp_awakened_min', models.PositiveIntegerField(default=0, verbose_name='Life (Awakened, Minimum)')),
                ('hp_awakened_max', models.PositiveIntegerField(default=0, verbose_name='Life (Awakened, Maximum)')),
                ('vocal_min', models.PositiveIntegerField(default=0, verbose_name='Vocal (Minimum)')),
                ('vocal_max', models.PositiveIntegerField(default=0, verbose_name='Vocal (Maximum)')),
                ('vocal_awakened_min', models.PositiveIntegerField(default=0, verbose_name='Vocal (Awakened, Minimum)')),
                ('vocal_awakened_max', models.PositiveIntegerField(default=0, verbose_name='Vocal (Awakened, Maximum)')),
                ('dance_min', models.PositiveIntegerField(default=0, verbose_name='Dance (Minimum)')),
                ('dance_max', models.PositiveIntegerField(default=0, verbose_name='Dance (Maximum)')),
                ('dance_awakened_min', models.PositiveIntegerField(default=0, verbose_name='Dance (Awakened, Minimum)')),
                ('dance_awakened_max', models.PositiveIntegerField(default=0, verbose_name='Dance (Awakened, Maximum)')),
                ('visual_min', models.PositiveIntegerField(default=0, verbose_name='Visual (Minimum)')),
                ('visual_max', models.PositiveIntegerField(default=0, verbose_name='Visual (Maximum)')),
                ('visual_awakened_min', models.PositiveIntegerField(default=0, verbose_name='Visual (Awakened, Minimum)')),
                ('visual_awakened_max', models.PositiveIntegerField(default=0, verbose_name='Visual (Awakened, Maximum)')),
                ('i_skill', models.PositiveIntegerField(null=True, verbose_name='Skill', choices=[(0, 'Lesser Perfect Lock'), (1, 'Greater Perfect Lock'), (2, 'Extreme Perfect Lock'), (3, 'Combo Lock'), (4, 'Healer'), (5, 'Life Lock'), (6, 'Combo Bonus'), (7, 'Perfect Score Bonus'), (8, 'Overload'), (9, 'Score Boost')])),
                ('trigger_value', models.FloatField(null=True, verbose_name=b'Trigger Value')),
                ('trigger_chance_min', models.FloatField(null=True, verbose_name=b'Trigger Chance (Minimum)')),
                ('trigger_chance_max', models.FloatField(null=True, verbose_name=b'Trigger Chance (Maximum)')),
                ('skill_duration_min', models.FloatField(null=True, verbose_name=b'Skill Duration (Minimum)')),
                ('skill_duration_max', models.FloatField(null=True, verbose_name=b'Skill Duration (Minimum)')),
                ('skill_value', models.FloatField(null=True, verbose_name=b'Skill Value')),
                ('skill_value2', models.FloatField(null=True, verbose_name=b'Other Skill Value')),
                ('skill_name', models.CharField(max_length=100, null=True, verbose_name=b'Skill name')),
                ('translated_skill_name', models.CharField(max_length=100, null=True, verbose_name=b'Translated skill name', blank=True)),
                ('leader_skill_type', models.PositiveIntegerField(null=True, verbose_name=b'Leader Skill Type', choices=[(0, 'Vocal'), (1, 'Dance'), (2, 'Visual'), (101, 'All'), (102, 'Life'), (103, 'Skill')])),
                ('leader_skill_percent', models.FloatField(null=True, verbose_name=b'Leader Skill Percent')),
                ('leader_skill_all', models.BooleanField(default=False)),
                ('_cache_idol_last_update', models.DateTimeField(null=True)),
                ('_cache_idol_name', models.CharField(max_length=100, null=True)),
                ('_cache_idol_japanese_name', models.CharField(max_length=100, null=True)),
                ('_cache_idol_i_type', models.PositiveIntegerField(null=True, choices=[(0, 'Cute'), (1, 'Cool'), (2, 'Passion')])),
                ('_cache_idol_image', models.ImageField(null=True, upload_to=cpro.models.uploadItem(b'idol'), blank=True)),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(unique=True, max_length=100, verbose_name='Name (Japanese)')),
                ('translated_name', models.CharField(max_length=100, null=True, verbose_name='Name (translated in English)')),
                ('image', models.ImageField(upload_to=cpro.models.uploadItem(b'e'), verbose_name='Image')),
                ('beginning', models.DateTimeField(null=True, verbose_name='Beginning')),
                ('end', models.DateTimeField(null=True, verbose_name='End')),
                ('t1_points', models.PositiveIntegerField(null=True, verbose_name='T1 points')),
                ('t1_rank', models.PositiveIntegerField(null=True, verbose_name='T1 rank')),
                ('t2_points', models.PositiveIntegerField(null=True, verbose_name='T2 points')),
                ('t2_rank', models.PositiveIntegerField(null=True, verbose_name='T2 rank')),
                ('t3_points', models.PositiveIntegerField(null=True, verbose_name='T3 points')),
                ('t3_rank', models.PositiveIntegerField(null=True, verbose_name='T3 rank')),
                ('t4_points', models.PositiveIntegerField(null=True, verbose_name='T4 points')),
                ('t4_rank', models.PositiveIntegerField(null=True, verbose_name='T4 rank')),
                ('t5_points', models.PositiveIntegerField(null=True, verbose_name='T5 points')),
                ('t5_rank', models.PositiveIntegerField(null=True, verbose_name='T5 rank')),
                ('owner', models.ForeignKey(related_name='added_events', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Idol',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(unique=True, max_length=100, verbose_name='Name (romaji)')),
                ('japanese_name', models.CharField(max_length=100, null=True, verbose_name='Name (Japanese)')),
                ('i_type', models.PositiveIntegerField(null=True, verbose_name='Type', choices=[(0, 'Cute'), (1, 'Cool'), (2, 'Passion')])),
                ('age', models.PositiveIntegerField(null=True, verbose_name='Age')),
                ('birthday', models.DateField(help_text=b'The year is not used, so write whatever', null=True, verbose_name='Birthday')),
                ('height', models.PositiveIntegerField(help_text=b'in cm', null=True, verbose_name='Height')),
                ('weight', models.PositiveIntegerField(help_text=b'in kg', null=True, verbose_name='Weight')),
                ('i_blood_type', models.PositiveIntegerField(null=True, verbose_name='Blood Type', choices=[(0, b'O'), (1, b'A'), (2, b'B'), (3, b'AB')])),
                ('i_writing_hand', models.PositiveIntegerField(null=True, verbose_name='Writing Hand', choices=[(0, 'Right'), (1, 'Left'), (2, 'Both')])),
                ('bust', models.PositiveIntegerField(help_text=b'in cm', null=True, verbose_name='Bust')),
                ('waist', models.PositiveIntegerField(help_text=b'in cm', null=True, verbose_name='Waist')),
                ('hips', models.PositiveIntegerField(help_text=b'in cm', null=True, verbose_name='Hips')),
                ('i_astrological_sign', models.PositiveIntegerField(null=True, verbose_name='Astrological Sign', choices=[(0, 'Leo'), (1, 'Aries'), (2, 'Libra'), (3, 'Virgo'), (4, 'Scorpio'), (5, 'Capricorn'), (6, 'Pisces'), (7, 'Gemini'), (8, 'Cancer'), (9, 'Sagittarius'), (10, 'Aquarius'), (11, 'Taurus')])),
                ('hometown', models.CharField(help_text=b'In Japanese characters.', max_length=100, null=True, verbose_name='Hometown')),
                ('romaji_hometown', models.CharField(help_text=b'In romaji.', max_length=100, null=True, verbose_name='Hometown')),
                ('hobbies', models.CharField(max_length=100, null=True, verbose_name='Hobbies')),
                ('description', models.TextField(null=True, verbose_name='Description')),
                ('CV', models.CharField(help_text=b'In Japanese characters.', max_length=100, null=True, verbose_name='CV')),
                ('romaji_CV', models.CharField(help_text=b'In romaji.', max_length=100, null=True, verbose_name='CV')),
                ('image', models.ImageField(upload_to=cpro.models.uploadItem(b'i'), verbose_name='Image')),
                ('signature', models.ImageField(upload_to=cpro.models.uploadItem(b'i/sign'), null=True, verbose_name='Signature')),
                ('owner', models.ForeignKey(related_name='added_idols', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='OwnedCard',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('awakened', models.BooleanField(default=False, verbose_name='Awakened')),
                ('max_bonded', models.BooleanField(default=False)),
                ('max_leveled', models.BooleanField(default=False)),
                ('star_rank', models.PositiveIntegerField(default=1, verbose_name='Star Rank', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(20)])),
                ('skill_level', models.PositiveIntegerField(default=1, verbose_name='Skill Level', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('obtained_date', models.DateField(null=True, verbose_name='Obtained Date')),
                ('account', models.ForeignKey(related_name='ownedcards', to='cpro.Account')),
                ('card', models.ForeignKey(related_name='owned', to='cpro.Card')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.AddField(
            model_name='card',
            name='event',
            field=models.ForeignKey(related_name='cards', on_delete=django.db.models.deletion.SET_NULL, verbose_name='Event', blank=True, to='cpro.Event', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='card',
            name='idol',
            field=models.ForeignKey(related_name='cards', on_delete=django.db.models.deletion.SET_NULL, verbose_name='Idol', to='cpro.Idol', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='card',
            name='owner',
            field=models.ForeignKey(related_name='added_cards', to=settings.AUTH_USER_MODEL),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='account',
            name='center',
            field=models.ForeignKey(related_name='centers', on_delete=django.db.models.deletion.SET_NULL, verbose_name='Center', to='cpro.OwnedCard', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='account',
            name='owner',
            field=models.ForeignKey(related_name='accounts', to=settings.AUTH_USER_MODEL),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='account',
            name='starter',
            field=models.ForeignKey(on_delete=django.db.models.deletion.SET_NULL, verbose_name='Starter', to='cpro.Card', null=True),
            preserve_default=True,
        ),
    ]
